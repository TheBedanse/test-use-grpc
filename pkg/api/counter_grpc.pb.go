// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: api/proto/counter.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountClient is the client API for Count service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountClient interface {
	Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Score(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	AddCounter(ctx context.Context, in *NameCountRequest, opts ...grpc.CallOption) (*ReadyCountResponse, error)
	Delete(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*ReadyDeleteResponse, error)
}

type countClient struct {
	cc grpc.ClientConnInterface
}

func NewCountClient(cc grpc.ClientConnInterface) CountClient {
	return &countClient{cc}
}

func (c *countClient) Change(ctx context.Context, in *ChangeRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/api.Count/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) Score(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/api.Count/Score", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) AddCounter(ctx context.Context, in *NameCountRequest, opts ...grpc.CallOption) (*ReadyCountResponse, error) {
	out := new(ReadyCountResponse)
	err := c.cc.Invoke(ctx, "/api.Count/AddCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countClient) Delete(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*ReadyDeleteResponse, error) {
	out := new(ReadyDeleteResponse)
	err := c.cc.Invoke(ctx, "/api.Count/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountServer is the server API for Count service.
// All implementations must embed UnimplementedCountServer
// for forward compatibility
type CountServer interface {
	Change(context.Context, *ChangeRequest) (*CountResponse, error)
	Score(context.Context, *CountRequest) (*CountResponse, error)
	AddCounter(context.Context, *NameCountRequest) (*ReadyCountResponse, error)
	Delete(context.Context, *CountRequest) (*ReadyDeleteResponse, error)
	mustEmbedUnimplementedCountServer()
}

// UnimplementedCountServer must be embedded to have forward compatible implementations.
type UnimplementedCountServer struct {
}

func (UnimplementedCountServer) Change(context.Context, *ChangeRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedCountServer) Score(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Score not implemented")
}
func (UnimplementedCountServer) AddCounter(context.Context, *NameCountRequest) (*ReadyCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCounter not implemented")
}
func (UnimplementedCountServer) Delete(context.Context, *CountRequest) (*ReadyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCountServer) mustEmbedUnimplementedCountServer() {}

// UnsafeCountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountServer will
// result in compilation errors.
type UnsafeCountServer interface {
	mustEmbedUnimplementedCountServer()
}

func RegisterCountServer(s grpc.ServiceRegistrar, srv CountServer) {
	s.RegisterService(&Count_ServiceDesc, srv)
}

func _Count_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Count/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).Change(ctx, req.(*ChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_Score_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).Score(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Count/Score",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).Score(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_AddCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).AddCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Count/AddCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).AddCounter(ctx, req.(*NameCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Count_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Count/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountServer).Delete(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Count_ServiceDesc is the grpc.ServiceDesc for Count service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Count_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Count",
	HandlerType: (*CountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Change",
			Handler:    _Count_Change_Handler,
		},
		{
			MethodName: "Score",
			Handler:    _Count_Score_Handler,
		},
		{
			MethodName: "AddCounter",
			Handler:    _Count_AddCounter_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Count_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/counter.proto",
}
